setwd("../../Log Files/Random Forest")
}
blockSeparator <- "#########################################################"
parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
write(line,file="rezultati_RF_MSE.txt",append=TRUE)
print(rez.rmse)
require(randomForest)
#setwd("../CSV Files/Start point")
#setwd("../CSV Files/Attrs with bad dist removed")
#setwd("../CSV Files/AWBD and outliers removed")
#setwd("../CSV Files/AWBD and outliers removed, remod attr added")
setwd("../CSV Files/Outliers removed, remod attr added")
#setwd("../CSV Files/AWBD, extreme outlier removing,  remod added")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izbacena obelezja sa losom raspodelom")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja i outlieri")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja, outlieri i dodat remod")
# 0 ZNACI DA SE RADI DEFAULT
numberOfTrees <- 125
numberOfVars <- 0
maxTermNodes <- 0
minSizeOfTermNodes <- 0 #controlles pruning
#xtest, ytest
trainData <- read.csv(file="train.csv", header=TRUE, sep=",")
testData <- read.csv(file="test.csv", header=TRUE, sep=",")
testData <- testData[, !(names(testData) %in% c("Id"))]
varNames <- names(trainData)
varNames <- varNames[!varNames %in% c("SalePrice", "Id")]
formulaNames <- paste(varNames, collapse = "+")
rf.form <- as.formula(paste("SalePrice", formulaNames, sep = " ~ "))
set.seed(58)
if(numberOfTrees != 0 && numberOfVars != 0){
res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees, mtry = numberOfVars)#, nodesize = minSizeOfTermNodes)
}else if(numberOfTrees != 0){
res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees)
}else if(numberOfVars != 0){
res.rf <- randomForest(rf.form, trainData, importance = TRUE, mtry = numberOfVars)
}else{
res.rf <- randomForest(rf.form, trainData, importance = TRUE)
}
plot(res.rf)
varImpPlot(res.rf,
sort = T,
main="Variable Importance",
n.var=15)
testData$predicted.response <- predict(res.rf , testData)
rez.rmse <- paste("MSE is",mean((testData$predicted.response - testData$SalePrice)^2), sep=" ")
#RADI ISPISA
workingDirectory <- getwd()
#RADI PISANjA U ODGOVARAJUCI FAJL
if (grepl("Clusterized", getwd())){
setwd("../../../Log Files/Random Forest")
}else{
setwd("../../Log Files/Random Forest")
}
blockSeparator <- "#########################################################"
parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
write(line,file="rezultati_RF_MSE.txt",append=TRUE)
print(rez.rmse)
source('C:/Users/Todorovic/Desktop/SZIAP/House Prices Advanced Regression Techniques/R Project Files/Random_Forest.R', echo=TRUE)
source('C:/Users/Todorovic/Desktop/SZIAP/House Prices Advanced Regression Techniques/R Project Files/Random_Forest.R', echo=TRUE)
require(randomForest)
#setwd("../CSV Files/Start point")
#setwd("../CSV Files/Attrs with bad dist removed")
#setwd("../CSV Files/AWBD and outliers removed")
#setwd("../CSV Files/AWBD and outliers removed, remod attr added")
setwd("../CSV Files/Outliers removed, remod attr added")
#setwd("../CSV Files/AWBD, extreme outlier removing,  remod added")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izbacena obelezja sa losom raspodelom")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja i outlieri")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja, outlieri i dodat remod")
#
# # 0 ZNACI DA SE RADI DEFAULT
# numberOfTrees <- 125
# numberOfVars <- 0
# maxTermNodes <- 0
# minSizeOfTermNodes <- 0 #controlles pruning
# #xtest, ytest
#
#
#
#
#
# trainData <- read.csv(file="train.csv", header=TRUE, sep=",")
# testData <- read.csv(file="test.csv", header=TRUE, sep=",")
# testData <- testData[, !(names(testData) %in% c("Id"))]
# varNames <- names(trainData)
# varNames <- varNames[!varNames %in% c("SalePrice", "Id")]
#
# formulaNames <- paste(varNames, collapse = "+")
#
# rf.form <- as.formula(paste("SalePrice", formulaNames, sep = " ~ "))
#
# set.seed(58)
#
# if(numberOfTrees != 0 && numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees, mtry = numberOfVars)#, nodesize = minSizeOfTermNodes)
# }else if(numberOfTrees != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees)
# }else if(numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, mtry = numberOfVars)
# }else{
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE)
# }
# plot(res.rf)
#
# varImpPlot(res.rf,
#            sort = T,
#            main="Variable Importance",
#            n.var=15)
#
# testData$predicted.response <- predict(res.rf , testData)
#
# rez.rmse <- paste("MSE is",mean((testData$predicted.response - testData$SalePrice)^2), sep=" ")
#
#
# #RADI ISPISA
# workingDirectory <- getwd()
#
# #RADI PISANjA U ODGOVARAJUCI FAJL
# if (grepl("Clusterized", getwd())){
#   setwd("../../../Log Files/Random Forest")
# }else{
#   setwd("../../Log Files/Random Forest")
# }
#
# blockSeparator <- "#########################################################"
# parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
# line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
# write(line,file="rezultati_RF_MSE.txt",append=TRUE)
# print(rez.rmse)
setwd("../CSV Files/Outliers removed, remod attr added")
print(getwd())
require(randomForest)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
#setwd("../CSV Files/Start point")
#setwd("../CSV Files/Attrs with bad dist removed")
#setwd("../CSV Files/AWBD and outliers removed")
#setwd("../CSV Files/AWBD and outliers removed, remod attr added")
print(getwd())
setwd("../CSV Files/Outliers removed, remod attr added")
#setwd("../CSV Files/AWBD, extreme outlier removing,  remod added")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izbacena obelezja sa losom raspodelom")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja i outlieri")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja, outlieri i dodat remod")
#
# # 0 ZNACI DA SE RADI DEFAULT
# numberOfTrees <- 125
# numberOfVars <- 0
# maxTermNodes <- 0
# minSizeOfTermNodes <- 0 #controlles pruning
# #xtest, ytest
#
#
#
#
#
# trainData <- read.csv(file="train.csv", header=TRUE, sep=",")
# testData <- read.csv(file="test.csv", header=TRUE, sep=",")
# testData <- testData[, !(names(testData) %in% c("Id"))]
# varNames <- names(trainData)
# varNames <- varNames[!varNames %in% c("SalePrice", "Id")]
#
# formulaNames <- paste(varNames, collapse = "+")
#
# rf.form <- as.formula(paste("SalePrice", formulaNames, sep = " ~ "))
#
# set.seed(58)
#
# if(numberOfTrees != 0 && numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees, mtry = numberOfVars)#, nodesize = minSizeOfTermNodes)
# }else if(numberOfTrees != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees)
# }else if(numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, mtry = numberOfVars)
# }else{
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE)
# }
# plot(res.rf)
#
# varImpPlot(res.rf,
#            sort = T,
#            main="Variable Importance",
#            n.var=15)
#
# testData$predicted.response <- predict(res.rf , testData)
#
# rez.rmse <- paste("MSE is",mean((testData$predicted.response - testData$SalePrice)^2), sep=" ")
#
#
# #RADI ISPISA
# workingDirectory <- getwd()
#
# #RADI PISANjA U ODGOVARAJUCI FAJL
# if (grepl("Clusterized", getwd())){
#   setwd("../../../Log Files/Random Forest")
# }else{
#   setwd("../../Log Files/Random Forest")
# }
#
# blockSeparator <- "#########################################################"
# parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
# line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
# write(line,file="rezultati_RF_MSE.txt",append=TRUE)
# print(rez.rmse)
require(randomForest)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
#setwd("../CSV Files/Start point")
#setwd("../CSV Files/Attrs with bad dist removed")
#setwd("../CSV Files/AWBD and outliers removed")
#setwd("../CSV Files/AWBD and outliers removed, remod attr added")
print(getwd())
setwd("../CSV Files/Outliers removed, remod attr added")
#setwd("../CSV Files/AWBD, extreme outlier removing,  remod added")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izbacena obelezja sa losom raspodelom")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja i outlieri")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja, outlieri i dodat remod")
#
# # 0 ZNACI DA SE RADI DEFAULT
# numberOfTrees <- 125
# numberOfVars <- 0
# maxTermNodes <- 0
# minSizeOfTermNodes <- 0 #controlles pruning
# #xtest, ytest
#
#
#
#
#
# trainData <- read.csv(file="train.csv", header=TRUE, sep=",")
# testData <- read.csv(file="test.csv", header=TRUE, sep=",")
# testData <- testData[, !(names(testData) %in% c("Id"))]
# varNames <- names(trainData)
# varNames <- varNames[!varNames %in% c("SalePrice", "Id")]
#
# formulaNames <- paste(varNames, collapse = "+")
#
# rf.form <- as.formula(paste("SalePrice", formulaNames, sep = " ~ "))
#
# set.seed(58)
#
# if(numberOfTrees != 0 && numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees, mtry = numberOfVars)#, nodesize = minSizeOfTermNodes)
# }else if(numberOfTrees != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees)
# }else if(numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, mtry = numberOfVars)
# }else{
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE)
# }
# plot(res.rf)
#
# varImpPlot(res.rf,
#            sort = T,
#            main="Variable Importance",
#            n.var=15)
#
# testData$predicted.response <- predict(res.rf , testData)
#
# rez.rmse <- paste("MSE is",mean((testData$predicted.response - testData$SalePrice)^2), sep=" ")
#
#
# #RADI ISPISA
# workingDirectory <- getwd()
#
# #RADI PISANjA U ODGOVARAJUCI FAJL
# if (grepl("Clusterized", getwd())){
#   setwd("../../../Log Files/Random Forest")
# }else{
#   setwd("../../Log Files/Random Forest")
# }
#
# blockSeparator <- "#########################################################"
# parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
# line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
# write(line,file="rezultati_RF_MSE.txt",append=TRUE)
# print(rez.rmse)
require(randomForest)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#setwd("../CSV Files/Start point")
#setwd("../CSV Files/Attrs with bad dist removed")
#setwd("../CSV Files/AWBD and outliers removed")
#setwd("../CSV Files/AWBD and outliers removed, remod attr added")
print(getwd())
setwd("../CSV Files/Outliers removed, remod attr added")
#setwd("../CSV Files/AWBD, extreme outlier removing,  remod added")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izbacena obelezja sa losom raspodelom")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja i outlieri")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja, outlieri i dodat remod")
#
# # 0 ZNACI DA SE RADI DEFAULT
# numberOfTrees <- 125
# numberOfVars <- 0
# maxTermNodes <- 0
# minSizeOfTermNodes <- 0 #controlles pruning
# #xtest, ytest
#
#
#
#
#
# trainData <- read.csv(file="train.csv", header=TRUE, sep=",")
# testData <- read.csv(file="test.csv", header=TRUE, sep=",")
# testData <- testData[, !(names(testData) %in% c("Id"))]
# varNames <- names(trainData)
# varNames <- varNames[!varNames %in% c("SalePrice", "Id")]
#
# formulaNames <- paste(varNames, collapse = "+")
#
# rf.form <- as.formula(paste("SalePrice", formulaNames, sep = " ~ "))
#
# set.seed(58)
#
# if(numberOfTrees != 0 && numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees, mtry = numberOfVars)#, nodesize = minSizeOfTermNodes)
# }else if(numberOfTrees != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees)
# }else if(numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, mtry = numberOfVars)
# }else{
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE)
# }
# plot(res.rf)
#
# varImpPlot(res.rf,
#            sort = T,
#            main="Variable Importance",
#            n.var=15)
#
# testData$predicted.response <- predict(res.rf , testData)
#
# rez.rmse <- paste("MSE is",mean((testData$predicted.response - testData$SalePrice)^2), sep=" ")
#
#
# #RADI ISPISA
# workingDirectory <- getwd()
#
# #RADI PISANjA U ODGOVARAJUCI FAJL
# if (grepl("Clusterized", getwd())){
#   setwd("../../../Log Files/Random Forest")
# }else{
#   setwd("../../Log Files/Random Forest")
# }
#
# blockSeparator <- "#########################################################"
# parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
# line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
# write(line,file="rezultati_RF_MSE.txt",append=TRUE)
# print(rez.rmse)
require(randomForest)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#setwd("../CSV Files/Start point")
#setwd("../CSV Files/Attrs with bad dist removed")
#setwd("../CSV Files/AWBD and outliers removed")
#setwd("../CSV Files/AWBD and outliers removed, remod attr added")
print(getwd())
setwd("../CSV Files/Outliers removed, remod attr added")
#setwd("../CSV Files/AWBD, extreme outlier removing,  remod added")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izbacena obelezja sa losom raspodelom")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja i outlieri")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja, outlieri i dodat remod")
#
# # 0 ZNACI DA SE RADI DEFAULT
# numberOfTrees <- 125
# numberOfVars <- 0
# maxTermNodes <- 0
# minSizeOfTermNodes <- 0 #controlles pruning
# #xtest, ytest
#
#
#
#
#
# trainData <- read.csv(file="train.csv", header=TRUE, sep=",")
# testData <- read.csv(file="test.csv", header=TRUE, sep=",")
# testData <- testData[, !(names(testData) %in% c("Id"))]
# varNames <- names(trainData)
# varNames <- varNames[!varNames %in% c("SalePrice", "Id")]
#
# formulaNames <- paste(varNames, collapse = "+")
#
# rf.form <- as.formula(paste("SalePrice", formulaNames, sep = " ~ "))
#
# set.seed(58)
#
# if(numberOfTrees != 0 && numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees, mtry = numberOfVars)#, nodesize = minSizeOfTermNodes)
# }else if(numberOfTrees != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees)
# }else if(numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, mtry = numberOfVars)
# }else{
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE)
# }
# plot(res.rf)
#
# varImpPlot(res.rf,
#            sort = T,
#            main="Variable Importance",
#            n.var=15)
#
# testData$predicted.response <- predict(res.rf , testData)
#
# rez.rmse <- paste("MSE is",mean((testData$predicted.response - testData$SalePrice)^2), sep=" ")
#
#
# #RADI ISPISA
# workingDirectory <- getwd()
#
# #RADI PISANjA U ODGOVARAJUCI FAJL
# if (grepl("Clusterized", getwd())){
#   setwd("../../../Log Files/Random Forest")
# }else{
#   setwd("../../Log Files/Random Forest")
# }
#
# blockSeparator <- "#########################################################"
# parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
# line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
# write(line,file="rezultati_RF_MSE.txt",append=TRUE)
# print(rez.rmse)
#BASIC PACKAGES
install.packages(c("rstudioapi", "glmnet", "randomForest"), dependencies=TRUE)
#FOR TREE VISUALIZATION
#POGLEDAJ - http://stats.stackexchange.com/questions/41443/how-to-actually-plot-a-sample-tree-from-randomforestgettree
# options(repos='http://cran.rstudio.org')
# have.packages <- installed.packages()
# cran.packages <- c('devtools','plotrix','randomForest','tree')
# to.install <- setdiff(cran.packages, have.packages[,1])
# if(length(to.install)>0) install.packages(to.install)
#
# library(devtools)
# if(!('reprtree' %in% installed.packages())){
#   install_github('araastat/reprtree')
# }
# for(p in c(cran.packages, 'reprtree')) eval(substitute(library(pkg), list(pkg=p)))
install.packages(c("rstudioapi", "glmnet", "randomForest"), dependencies = TRUE)
require(randomForest)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#setwd("../CSV Files/Start point")
#setwd("../CSV Files/Attrs with bad dist removed")
#setwd("../CSV Files/AWBD and outliers removed")
#setwd("../CSV Files/AWBD and outliers removed, remod attr added")
print(getwd())
setwd("../CSV Files/Outliers removed, remod attr added")
#setwd("../CSV Files/AWBD, extreme outlier removing,  remod added")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izbacena obelezja sa losom raspodelom")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja i outlieri")
#setwd("C:/Users/Eugene/Desktop/SIAP Veliki komp/csvovi za testiranje/klasterizovani/izuzeta obelezja, outlieri i dodat remod")
#
# # 0 ZNACI DA SE RADI DEFAULT
# numberOfTrees <- 125
# numberOfVars <- 0
# maxTermNodes <- 0
# minSizeOfTermNodes <- 0 #controlles pruning
# #xtest, ytest
#
#
#
#
#
# trainData <- read.csv(file="train.csv", header=TRUE, sep=",")
# testData <- read.csv(file="test.csv", header=TRUE, sep=",")
# testData <- testData[, !(names(testData) %in% c("Id"))]
# varNames <- names(trainData)
# varNames <- varNames[!varNames %in% c("SalePrice", "Id")]
#
# formulaNames <- paste(varNames, collapse = "+")
#
# rf.form <- as.formula(paste("SalePrice", formulaNames, sep = " ~ "))
#
# set.seed(58)
#
# if(numberOfTrees != 0 && numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees, mtry = numberOfVars)#, nodesize = minSizeOfTermNodes)
# }else if(numberOfTrees != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, ntree = numberOfTrees)
# }else if(numberOfVars != 0){
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE, mtry = numberOfVars)
# }else{
#   res.rf <- randomForest(rf.form, trainData, importance = TRUE)
# }
# plot(res.rf)
#
# varImpPlot(res.rf,
#            sort = T,
#            main="Variable Importance",
#            n.var=15)
#
# testData$predicted.response <- predict(res.rf , testData)
#
# rez.rmse <- paste("MSE is",mean((testData$predicted.response - testData$SalePrice)^2), sep=" ")
#
#
# #RADI ISPISA
# workingDirectory <- getwd()
#
# #RADI PISANjA U ODGOVARAJUCI FAJL
# if (grepl("Clusterized", getwd())){
#   setwd("../../../Log Files/Random Forest")
# }else{
#   setwd("../../Log Files/Random Forest")
# }
#
# blockSeparator <- "#########################################################"
# parameters <- paste("Number of Trees = ", numberOfTrees, " ,", "Number of Variables = ", numberOfVars, ", ", "Max number of nodes = ", maxTermNodes, ", ", "Min size of terminal nodes = ", minSizeOfTermNodes, "(NOTE: if ommited or zero -> default)")
# line <- paste(workingDirectory, parameters, rez.rmse, " ", blockSeparator, " ", sep = "\n")
# write(line,file="rezultati_RF_MSE.txt",append=TRUE)
# print(rez.rmse)
